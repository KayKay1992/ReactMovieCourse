In React, a component is a building block of the user interface (UI). It is a self-contained, reusable piece of code that defines how a part of the UI should appear and behave. Components can be thought of as the "pieces" that make up the entire application.

React components allow you to break down complex UIs into smaller, manageable pieces that can be reused, maintained, and tested independently.

Types of Components in React
Functional Components:

These are simple JavaScript functions that return JSX (JavaScript XML), which defines how the UI should look.

They are the modern, preferred way to write components in React, especially with the introduction of React Hooks in React 16.8.

Example: import React from 'react';

function Welcome(props) {
  return <h1>Hello, {props.name}!</h1>;
}

export default Welcome;

2 Class Components:

These components are ES6 classes that extend React.Component. They can have internal state and lifecycle methods.

While functional components are now preferred, class components are still widely used in legacy codebases.

Example of a class component
import React, { Component } from 'react';

class Welcome extends Component {
  render() {
    return <h1>Hello, {this.props.name}!</h1>;
  }
}

export default Welcome;

Here, Welcome is a class component. It uses this.props to access properties passed to it and renders a greeting message. In class components, the render method is required to output JSX.

Why Use Components?
Reusability: Components can be reused across different parts of the application. For example, a Button component can be reused wherever a button is needed.

Encapsulation: Each component is self-contained, meaning it manages its own state, behavior, and rendering logic.

Maintainability: Smaller, focused components are easier to maintain, test, and debug compared to large monolithic code blocks.

Composition: Components can be nested inside other components, allowing complex UIs to be built from simple building blocks.

Example: Building a Simple Component

import React, { useState } from 'react';

// A simple Button component
function Button({ label, onClick }) {
  return <button onClick={onClick}>{label}</button>;
}

// Main App component
function App() {
  const [count, setCount] = useState(0);

  const increment = () => setCount(count + 1);

  return (
    <div>
      <h1>Counter: {count}</h1>
      <Button label="Increment" onClick={increment} />
    </div>
  );
}

export default App;

App is the parent component, which maintains the count state.

Button is a child component that receives the label and onClick handler as props, making it reusable.